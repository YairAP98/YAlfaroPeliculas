@model ML.Cine
@{
    ViewBag.Title = "GetAll";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    #map {
        height: 370px;
    }
</style>
<script>
    (g => {
        var h, a, k, p = "The Google Maps JavaScript API", c = "google", l = "importLibrary", q = "__ib__", m = document, b = window;
        b = b[c] || (b[c] = {});
        var d = b.maps || (b.maps = {});
        var r = new Set, e = new URLSearchParams;

        var u = () => h || (h = new Promise(async (f, n) => {
            await (a = m.createElement("script"));
            e.set("libraries", [...r] + "");

            for (k in g) e.set(k.replace(/[A-Z]/g, t => "_" + t[0].toLowerCase()), g[k]);

            e.set("callback", c + ".maps." + q);
            a.src = `https://maps.${c}apis.com/maps/api/js?` + e;
            d[q] = f;
            a.onerror = () => h = n(Error(p + " could not load."));
            a.nonce = m.querySelector("script[nonce]")?.nonce || "";
            m.head.append(a);
        }));

        d[l] ? console.warn(p + " only loads once. Ignoring:", g) : d[l] = (f, ...n) => r.add(f) && u().then(() => d[l](f, ...n))
    })({
        key: "AIzaSyCSKBDdPPlfca_zTwyxKiicRQn1qfgRjLw",
    });
</script>
<div class="text-center">
    <h2>Estadísticas</h2>
</div>
<script src="https://canvasjs.com/assets/script/jquery-1.11.1.min.js"></script>
<script src="https://cdn.canvasjs.com/jquery.canvasjs.min.js"></script>

<div class="container">
    <div class="row">
        <div class="col-md-6">
            <div id="chartContainer" style="height: 370px; width: 100%;"></div>
        </div>
        <div class="col-md-6">
            <h2>Puntos de Ventas</h2>
            <div id="map" style="height: 370px;"></div>
        </div>
    </div>
</div>

<hr />

<div class="container">
    @if (Model.Cines != null)
    {
        decimal norte = 0;
        decimal sur = 0;
        decimal este = 0;
        decimal oeste = 0;

        @foreach (ML.Cine cine in Model.Cines)
        {
            switch (cine.Zona.IdZona)
            {
                case 1:
                    norte += cine.Ventas;
                    break;
                case 2:
                    sur += cine.Ventas;
                    break;
                case 3:
                    este += cine.Ventas;
                    break;
                case 4:
                    oeste += cine.Ventas;
                    break;
            }
        }

        decimal suma = norte + sur + este + oeste;
        norte = norte / suma * 100;
        sur = sur / suma * 100;
        este = este / suma * 100;
        oeste = oeste / suma * 100;
        <p>Suma de Ventas Totales: @suma</p>

        <text>
            <script>
                window.onload = function () {
                    var options = {
                        title: {
                            text: "Ventas por Zonas"
                        },
                        animationEnabled: true,
                        data: [{
                            type: "pie",
                            startAngle: 40,
                            toolTipContent: "<b>{label}</b>: {y}%",
                            showInLegend: "true",
                            legendText: "{label}",
                            indexLabelFontSize: 16,
                            indexLabel: "{label} - {y}%",
                            dataPoints: [
                                { y: @norte, label: "Norte" },
                                { y: @sur, label: "Sur" },
                                { y: @este, label: "Este" },
                                { y: @oeste, label: "Oeste" },
                            ]
                        }]
                    };
                    $("#chartContainer").CanvasJSChart(options);
                }
            </script>
        </text>
    }
</div>

@section scripts{
    <script type="text/javascript">
        let map;

        async function initMap() {
            // The location of Uluru
            const position = { lat: 19.4303622, lng: -99.1616508 };
            // Request needed libraries.
            const { Map } = await google.maps.importLibrary("maps");
            const { AdvancedMarkerView } = await google.maps.importLibrary("marker");

            // The map, centered at Uluru
            map = new Map(document.getElementById("map"), {
                zoom: 10,
                center: position,
                mapId: "DEMO_MAP_ID",
            });

        @foreach (ML.Cine cine in Model.Cines)
        {
            <text>
                                var geocoder = new google.maps.Geocoder();
                geocoder.geocode({ 'address': '@cine.Direccion' }, function (results, status) {
                    if (status == google.maps.GeocoderStatus.OK) {
                        var direccion = { lat: results[0].geometry.location.lat(), lng: results[0].geometry.location.lng() };
                        new google.maps.Marker({
                            map: map,
                            position: direccion,
                        });
                    }
                });
            </text>
        }
                }
        initMap();
    </script>
}
